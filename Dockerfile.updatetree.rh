FROM registry.redhat.io/ubi9/go-toolset:9.6@sha256:3f552f246b4bd5bdfb4da0812085d381d00d3625769baecaed58c2667d344e5c AS build-env
ENV APP_ROOT=/opt/app-root
ENV GOPATH=$APP_ROOT
ENV CGO_ENABLED=1
ENV -buildvcs=false
ENV GOEXPERIMENT=strictfipsruntime

WORKDIR $APP_ROOT/src/
ADD go.mod go.sum $APP_ROOT/src/
# Add source code
ADD ./ $APP_ROOT/src/

RUN go mod download && \
    git config --global --add safe.directory /opt/app-root/src && \
    make -f Build-clis.mak updatetree-cross-platform && \
    cp updatetree-linux-amd64 updatetree && \
    gzip updatetree-linux-amd64 && \
    gzip updatetree-linux-ppc64le && \
    gzip updatetree-linux-s390x && \
    gzip updatetree-linux-arm64 && \
    gzip updatetree-darwin-amd64 && \
    gzip updatetree-darwin-arm64 && \
    gzip updatetree-windows-amd64.exe


# Multi-Stage production build
FROM registry.access.redhat.com/ubi9/ubi-minimal@sha256:8d905a93f1392d4a8f7fb906bd49bf540290674b28d82de3536bb4d0898bf9d7 AS deploy

# Retrieve the binary from the previous stage
COPY --from=build-env /opt/app-root/src/updatetree /

# Add license file
COPY LICENSE /licenses/LICENSE

LABEL description="Trillian is an implementation of the concepts described in the Verifiable Data Structures white paper, which in turn is an extension and generalisation of the ideas which underpin Certificate Transparency."
LABEL io.k8s.description="Trillian is an implementation of the concepts described in the Verifiable Data Structures white paper."
LABEL io.k8s.display-name="updatetree"
LABEL io.openshift.tags="trillian updatetree trusted-artifact-signer"
LABEL summary="Provides the trillian updatetree binary for updating merkel trees."
LABEL com.redhat.component="updatetree"
LABEL name="updatetree"

COPY --from=build-env /opt/app-root/src/updatetree-darwin-amd64.gz /usr/local/bin/updatetree-darwin-amd64.gz
COPY --from=build-env /opt/app-root/src/updatetree-windows-amd64.exe.gz /usr/local/bin/updatetree-windows-amd64.exe.gz
COPY --from=build-env /opt/app-root/src/updatetree-darwin-arm64.gz /usr/local/bin/updatetree-darwin-arm64.gz
COPY --from=build-env /opt/app-root/src/updatetree-linux-arm64.gz /usr/local/bin/updatetree-linux-arm64.gz
COPY --from=build-env /opt/app-root/src/updatetree-linux-ppc64le.gz /usr/local/bin/updatetree-linux-ppc64le.gz
COPY --from=build-env /opt/app-root/src/updatetree-linux-s390x.gz /usr/local/bin/updatetree-linux-s390x.gz
COPY --from=build-env /opt/app-root/src/updatetree-linux-amd64.gz /usr/local/bin/updatetree-linux-amd64.gz
COPY --from=build-env /opt/app-root/src/updatetree /usr/local/bin/updatetree

RUN chown root:0 /usr/local/bin/updatetree && \
    chmod g+wx /usr/local/bin/updatetree && \
    chown root:0 /usr/local/bin/updatetree-darwin-amd64.gz && chmod g+wx /usr/local/bin/updatetree-darwin-amd64.gz && \
    chown root:0 /usr/local/bin/updatetree-darwin-arm64.gz && chmod g+wx /usr/local/bin/updatetree-darwin-arm64.gz && \
    chown root:0 /usr/local/bin/updatetree-windows-amd64.exe.gz && chmod g+wx /usr/local/bin/updatetree-windows-amd64.exe.gz && \
    chown root:0 /usr/local/bin/updatetree-linux-arm64.gz && chmod g+wx /usr/local/bin/updatetree-linux-arm64.gz && \
    chown root:0 /usr/local/bin/updatetree-linux-amd64.gz && chmod g+wx /usr/local/bin/updatetree-linux-amd64.gz && \
    chown root:0 /usr/local/bin/updatetree-linux-ppc64le.gz && chmod g+wx /usr/local/bin/updatetree-linux-ppc64le.gz && \
    chown root:0 /usr/local/bin/updatetree-linux-s390x.gz && chmod g+wx /usr/local/bin/updatetree-linux-s390x.gz

##Configure home directory
ENV HOME=/home
RUN chgrp -R 0 /${HOME} && chmod -R g=u /${HOME}

WORKDIR ${HOME}

# Do not run as root
USER 1001

# Set the binary as the entrypoint of the container
ENTRYPOINT ["/updatetree"]
